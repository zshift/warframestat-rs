/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: living
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MeleeWeaponAllOf {
    #[serde(rename = "blockingAngle", skip_serializing_if = "Option::is_none")]
    pub blocking_angle: Option<i32>,
    #[serde(rename = "comboDuration", skip_serializing_if = "Option::is_none")]
    pub combo_duration: Option<i32>,
    #[serde(rename = "damagePerShot", skip_serializing_if = "Option::is_none")]
    pub damage_per_shot: Option<Vec<f32>>,
    #[serde(rename = "followThrough", skip_serializing_if = "Option::is_none")]
    pub follow_through: Option<f32>,
    #[serde(rename = "heavyAttackDamage", skip_serializing_if = "Option::is_none")]
    pub heavy_attack_damage: Option<i32>,
    #[serde(rename = "heavySlamAttack", skip_serializing_if = "Option::is_none")]
    pub heavy_slam_attack: Option<i32>,
    #[serde(rename = "heavySlamRadialDamage", skip_serializing_if = "Option::is_none")]
    pub heavy_slam_radial_damage: Option<i32>,
    #[serde(rename = "heavySlamRadius", skip_serializing_if = "Option::is_none")]
    pub heavy_slam_radius: Option<i32>,
    #[serde(rename = "range", skip_serializing_if = "Option::is_none")]
    pub range: Option<f32>,
    #[serde(rename = "slamAttack", skip_serializing_if = "Option::is_none")]
    pub slam_attack: Option<i32>,
    #[serde(rename = "slamRadialDamage", skip_serializing_if = "Option::is_none")]
    pub slam_radial_damage: Option<i32>,
    #[serde(rename = "slamRadius", skip_serializing_if = "Option::is_none")]
    pub slam_radius: Option<i32>,
    #[serde(rename = "slideAttack", skip_serializing_if = "Option::is_none")]
    pub slide_attack: Option<i32>,
    #[serde(rename = "stancePolarity", skip_serializing_if = "Option::is_none")]
    pub stance_polarity: Option<crate::models::Polarity>,
    #[serde(rename = "windUp", skip_serializing_if = "Option::is_none")]
    pub wind_up: Option<f32>,
}

impl MeleeWeaponAllOf {
    pub fn new() -> MeleeWeaponAllOf {
        MeleeWeaponAllOf {
            blocking_angle: None,
            combo_duration: None,
            damage_per_shot: None,
            follow_through: None,
            heavy_attack_damage: None,
            heavy_slam_attack: None,
            heavy_slam_radial_damage: None,
            heavy_slam_radius: None,
            range: None,
            slam_attack: None,
            slam_radial_damage: None,
            slam_radius: None,
            slide_attack: None,
            stance_polarity: None,
            wind_up: None,
        }
    }
}


