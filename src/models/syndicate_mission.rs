/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: living
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SyndicateMission {
    #[serde(rename = "nodes", skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    #[serde(rename = "eta")]
    pub eta: String,
    #[serde(rename = "jobs", skip_serializing_if = "Option::is_none")]
    pub jobs: Option<Vec<crate::models::SyndicateJob>>,
    #[serde(rename = "syndicate")]
    pub syndicate: crate::models::Syndicate,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "expiry")]
    pub expiry: String,
    #[serde(rename = "activation")]
    pub activation: String,
}

impl SyndicateMission {
    pub fn new(eta: String, syndicate: crate::models::Syndicate, id: String, expiry: String, activation: String) -> SyndicateMission {
        SyndicateMission {
            nodes: None,
            eta,
            jobs: None,
            syndicate,
            id,
            expiry,
            activation,
        }
    }
}


