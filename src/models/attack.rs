/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: living
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Attack {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<f32>,
    #[serde(rename = "radius", skip_serializing_if = "Option::is_none")]
    pub radius: Option<f32>,
    #[serde(rename = "speed", skip_serializing_if = "Option::is_none")]
    pub speed: Option<f32>,
    #[serde(rename = "pellet", skip_serializing_if = "Option::is_none")]
    pub pellet: Option<Box<crate::models::AttackPellet>>,
    #[serde(rename = "crit_chance", skip_serializing_if = "Option::is_none")]
    pub crit_chance: Option<f32>,
    #[serde(rename = "crit_mult", skip_serializing_if = "Option::is_none")]
    pub crit_mult: Option<f32>,
    #[serde(rename = "status_chance", skip_serializing_if = "Option::is_none")]
    pub status_chance: Option<f32>,
    #[serde(rename = "charge_time", skip_serializing_if = "Option::is_none")]
    pub charge_time: Option<f32>,
    #[serde(rename = "shot_type", skip_serializing_if = "Option::is_none")]
    pub shot_type: Option<f32>,
    #[serde(rename = "flight", skip_serializing_if = "Option::is_none")]
    pub flight: Option<f32>,
    #[serde(rename = "falloff", skip_serializing_if = "Option::is_none")]
    pub falloff: Option<Box<crate::models::AttackFalloff>>,
    #[serde(rename = "damage", skip_serializing_if = "Option::is_none")]
    pub damage: Option<Box<crate::models::Damage>>,
    #[serde(rename = "slide", skip_serializing_if = "Option::is_none")]
    pub slide: Option<String>,
    #[serde(rename = "jump", skip_serializing_if = "Option::is_none")]
    pub jump: Option<String>,
    #[serde(rename = "wall", skip_serializing_if = "Option::is_none")]
    pub wall: Option<String>,
    #[serde(rename = "channeling", skip_serializing_if = "Option::is_none")]
    pub channeling: Option<f32>,
    #[serde(rename = "slam", skip_serializing_if = "Option::is_none")]
    pub slam: Option<Box<crate::models::SlamAttack>>,
}

impl Attack {
    pub fn new() -> Attack {
        Attack {
            name: None,
            duration: None,
            radius: None,
            speed: None,
            pellet: None,
            crit_chance: None,
            crit_mult: None,
            status_chance: None,
            charge_time: None,
            shot_type: None,
            flight: None,
            falloff: None,
            damage: None,
            slide: None,
            jump: None,
            wall: None,
            channeling: None,
            slam: None,
        }
    }
}


