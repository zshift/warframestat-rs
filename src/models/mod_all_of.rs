/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: living
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ModAllOf {
    #[serde(rename = "baseDrain", skip_serializing_if = "Option::is_none")]
    pub base_drain: Option<i32>,
    #[serde(rename = "compatName", skip_serializing_if = "Option::is_none")]
    pub compat_name: Option<String>,
    #[serde(rename = "fusionLimit", skip_serializing_if = "Option::is_none")]
    pub fusion_limit: Option<i32>,
    #[serde(rename = "levelStats", skip_serializing_if = "Option::is_none")]
    pub level_stats: Option<Vec<crate::models::ModAllOfLevelStats>>,
    #[serde(rename = "polarity", skip_serializing_if = "Option::is_none")]
    pub polarity: Option<crate::models::Polarity>,
    #[serde(rename = "transmutable", skip_serializing_if = "Option::is_none")]
    pub transmutable: Option<bool>,
}

impl ModAllOf {
    pub fn new() -> ModAllOf {
        ModAllOf {
            base_drain: None,
            compat_name: None,
            fusion_limit: None,
            level_stats: None,
            polarity: None,
            transmutable: None,
        }
    }
}


