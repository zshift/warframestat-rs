/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: living
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */


/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Element {
    #[serde(rename = "impact")]
    Impact,
    #[serde(rename = "puncture")]
    Puncture,
    #[serde(rename = "slash")]
    Slash,
    #[serde(rename = "heat")]
    Heat,
    #[serde(rename = "cold")]
    Cold,
    #[serde(rename = "electric")]
    Electric,
    #[serde(rename = "toxin")]
    Toxin,
    #[serde(rename = "gas")]
    Gas,
    #[serde(rename = "viral")]
    Viral,
    #[serde(rename = "corrosive")]
    Corrosive,
    #[serde(rename = "blast")]
    Blast,
    #[serde(rename = "magnetic")]
    Magnetic,
    #[serde(rename = "radiation")]
    Radiation,
    #[serde(rename = "true")]
    _True,
    #[serde(rename = "void")]
    Void,

}

impl ToString for Element {
    fn to_string(&self) -> String {
        match self {
            Self::Impact => String::from("impact"),
            Self::Puncture => String::from("puncture"),
            Self::Slash => String::from("slash"),
            Self::Heat => String::from("heat"),
            Self::Cold => String::from("cold"),
            Self::Electric => String::from("electric"),
            Self::Toxin => String::from("toxin"),
            Self::Gas => String::from("gas"),
            Self::Viral => String::from("viral"),
            Self::Corrosive => String::from("corrosive"),
            Self::Blast => String::from("blast"),
            Self::Magnetic => String::from("magnetic"),
            Self::Radiation => String::from("radiation"),
            Self::_True => String::from("true"),
            Self::Void => String::from("void"),
        }
    }
}

impl Default for Element {
    fn default() -> Element {
        Self::Impact
    }
}




