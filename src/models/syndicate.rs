/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: living
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */


/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Syndicate {
    #[serde(rename = "Arbiters of Hexis")]
    ArbitersOfHexis,
    #[serde(rename = "Cephalon Suda")]
    CephalonSuda,
    #[serde(rename = "Assassins")]
    Assassins,
    #[serde(rename = "Nightwave")]
    Nightwave,
    #[serde(rename = "Ostrons")]
    Ostrons,
    #[serde(rename = "Vox Solaris")]
    VoxSolaris,
    #[serde(rename = "Solaris United")]
    SolarisUnited,
    #[serde(rename = "Perrin Sequence")]
    PerrinSequence,
    #[serde(rename = "Steel Meridian")]
    SteelMeridian,
    #[serde(rename = "Red Veil")]
    RedVeil,
    #[serde(rename = "New Loka")]
    NewLoka,

}

impl ToString for Syndicate {
    fn to_string(&self) -> String {
        match self {
            Self::ArbitersOfHexis => String::from("Arbiters of Hexis"),
            Self::CephalonSuda => String::from("Cephalon Suda"),
            Self::Assassins => String::from("Assassins"),
            Self::Nightwave => String::from("Nightwave"),
            Self::Ostrons => String::from("Ostrons"),
            Self::VoxSolaris => String::from("Vox Solaris"),
            Self::SolarisUnited => String::from("Solaris United"),
            Self::PerrinSequence => String::from("Perrin Sequence"),
            Self::SteelMeridian => String::from("Steel Meridian"),
            Self::RedVeil => String::from("Red Veil"),
            Self::NewLoka => String::from("New Loka"),
        }
    }
}

impl Default for Syndicate {
    fn default() -> Syndicate {
        Self::ArbitersOfHexis
    }
}




