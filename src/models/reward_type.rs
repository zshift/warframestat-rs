/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: living
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

/// RewardType : One of the reward types

/// One of the reward types
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RewardType {
    #[serde(rename = "vauban")]
    Vauban,
    #[serde(rename = "vandal")]
    Vandal,
    #[serde(rename = "wraith")]
    Wraith,
    #[serde(rename = "skin")]
    Skin,
    #[serde(rename = "helmet")]
    Helmet,
    #[serde(rename = "nitain")]
    Nitain,
    #[serde(rename = "mutalist")]
    Mutalist,
    #[serde(rename = "weapon")]
    Weapon,
    #[serde(rename = "fieldron")]
    Fieldron,
    #[serde(rename = "detonite")]
    Detonite,
    #[serde(rename = "mutagen")]
    Mutagen,
    #[serde(rename = "aura")]
    Aura,
    #[serde(rename = "neuralSensors")]
    NeuralSensors,
    #[serde(rename = "orokinCell")]
    OrokinCell,
    #[serde(rename = "alloyPlate")]
    AlloyPlate,
    #[serde(rename = "circuits")]
    Circuits,
    #[serde(rename = "controlModule")]
    ControlModule,
    #[serde(rename = "ferrite")]
    Ferrite,
    #[serde(rename = "gallium")]
    Gallium,
    #[serde(rename = "morphics")]
    Morphics,
    #[serde(rename = "nanoSpores")]
    NanoSpores,
    #[serde(rename = "oxium")]
    Oxium,
    #[serde(rename = "rubedo")]
    Rubedo,
    #[serde(rename = "salvage")]
    Salvage,
    #[serde(rename = "plastids")]
    Plastids,
    #[serde(rename = "polymerBundle")]
    PolymerBundle,
    #[serde(rename = "argonCrystal")]
    ArgonCrystal,
    #[serde(rename = "cryotic")]
    Cryotic,
    #[serde(rename = "tellurium")]
    Tellurium,
    #[serde(rename = "neurodes")]
    Neurodes,
    #[serde(rename = "nightmare")]
    Nightmare,
    #[serde(rename = "endo")]
    Endo,
    #[serde(rename = "reactor")]
    Reactor,
    #[serde(rename = "catalyst")]
    Catalyst,
    #[serde(rename = "forma")]
    Forma,
    #[serde(rename = "synthula")]
    Synthula,
    #[serde(rename = "exilus")]
    Exilus,
    #[serde(rename = "riven")]
    Riven,
    #[serde(rename = "kavatGene")]
    KavatGene,
    #[serde(rename = "kubrowEgg")]
    KubrowEgg,
    #[serde(rename = "traces")]
    Traces,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "credits")]
    Credits,

}

impl ToString for RewardType {
    fn to_string(&self) -> String {
        match self {
            Self::Vauban => String::from("vauban"),
            Self::Vandal => String::from("vandal"),
            Self::Wraith => String::from("wraith"),
            Self::Skin => String::from("skin"),
            Self::Helmet => String::from("helmet"),
            Self::Nitain => String::from("nitain"),
            Self::Mutalist => String::from("mutalist"),
            Self::Weapon => String::from("weapon"),
            Self::Fieldron => String::from("fieldron"),
            Self::Detonite => String::from("detonite"),
            Self::Mutagen => String::from("mutagen"),
            Self::Aura => String::from("aura"),
            Self::NeuralSensors => String::from("neuralSensors"),
            Self::OrokinCell => String::from("orokinCell"),
            Self::AlloyPlate => String::from("alloyPlate"),
            Self::Circuits => String::from("circuits"),
            Self::ControlModule => String::from("controlModule"),
            Self::Ferrite => String::from("ferrite"),
            Self::Gallium => String::from("gallium"),
            Self::Morphics => String::from("morphics"),
            Self::NanoSpores => String::from("nanoSpores"),
            Self::Oxium => String::from("oxium"),
            Self::Rubedo => String::from("rubedo"),
            Self::Salvage => String::from("salvage"),
            Self::Plastids => String::from("plastids"),
            Self::PolymerBundle => String::from("polymerBundle"),
            Self::ArgonCrystal => String::from("argonCrystal"),
            Self::Cryotic => String::from("cryotic"),
            Self::Tellurium => String::from("tellurium"),
            Self::Neurodes => String::from("neurodes"),
            Self::Nightmare => String::from("nightmare"),
            Self::Endo => String::from("endo"),
            Self::Reactor => String::from("reactor"),
            Self::Catalyst => String::from("catalyst"),
            Self::Forma => String::from("forma"),
            Self::Synthula => String::from("synthula"),
            Self::Exilus => String::from("exilus"),
            Self::Riven => String::from("riven"),
            Self::KavatGene => String::from("kavatGene"),
            Self::KubrowEgg => String::from("kubrowEgg"),
            Self::Traces => String::from("traces"),
            Self::Other => String::from("other"),
            Self::Credits => String::from("credits"),
        }
    }
}

impl Default for RewardType {
    fn default() -> RewardType {
        Self::Vauban
    }
}




