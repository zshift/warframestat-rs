/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: living
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Warframe {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "uniqueName", skip_serializing_if = "Option::is_none")]
    pub unique_name: Option<String>,
    #[serde(rename = "patchlogs", skip_serializing_if = "Option::is_none")]
    pub patchlogs: Option<Vec<crate::models::Patchlog>>,
    #[serde(rename = "components", skip_serializing_if = "Option::is_none")]
    pub components: Option<Box<crate::models::Item>>,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "tradable", skip_serializing_if = "Option::is_none")]
    pub tradable: Option<bool>,
    #[serde(rename = "introduced", skip_serializing_if = "Option::is_none")]
    pub introduced: Option<Box<crate::models::Introduced>>,
    #[serde(rename = "category", skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[serde(rename = "productCategory", skip_serializing_if = "Option::is_none")]
    pub product_category: Option<String>,
    /// Image name, accessible at https://cdn.warframestat.us/img/{imageName} 
    #[serde(rename = "imageName", skip_serializing_if = "Option::is_none")]
    pub image_name: Option<String>,
    #[serde(rename = "estimatedVaultDate", skip_serializing_if = "Option::is_none")]
    pub estimated_vault_date: Option<String>,
    #[serde(rename = "shield")]
    pub shield: String,
    #[serde(rename = "polarities")]
    pub polarities: Vec<serde_json::Value>,
    #[serde(rename = "prime_power", skip_serializing_if = "Option::is_none")]
    pub prime_power: Option<String>,
    #[serde(rename = "prime_mr", skip_serializing_if = "Option::is_none")]
    pub prime_mr: Option<String>,
    #[serde(rename = "color")]
    pub color: f32,
    #[serde(rename = "prime_polarities", skip_serializing_if = "Option::is_none")]
    pub prime_polarities: Option<Vec<serde_json::Value>>,
    #[serde(rename = "conclave")]
    pub conclave: String,
    #[serde(rename = "prime_armor", skip_serializing_if = "Option::is_none")]
    pub prime_armor: Option<String>,
    #[serde(rename = "speed")]
    pub speed: String,
    #[serde(rename = "aura")]
    pub aura: String,
    #[serde(rename = "prime_url", skip_serializing_if = "Option::is_none")]
    pub prime_url: Option<String>,
    #[serde(rename = "prime_health", skip_serializing_if = "Option::is_none")]
    pub prime_health: Option<String>,
    #[serde(rename = "power")]
    pub power: String,
    #[serde(rename = "prime_aura", skip_serializing_if = "Option::is_none")]
    pub prime_aura: Option<String>,
    #[serde(rename = "info")]
    pub info: String,
    #[serde(rename = "thumbnail")]
    pub thumbnail: String,
    #[serde(rename = "mr")]
    pub mr: String,
    #[serde(rename = "prime_shield", skip_serializing_if = "Option::is_none")]
    pub prime_shield: Option<String>,
    #[serde(rename = "health")]
    pub health: String,
    #[serde(rename = "prime_speed", skip_serializing_if = "Option::is_none")]
    pub prime_speed: Option<String>,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "regex")]
    pub regex: String,
    #[serde(rename = "armor")]
    pub armor: String,
    #[serde(rename = "location")]
    pub location: String,
    #[serde(rename = "prime_conclave", skip_serializing_if = "Option::is_none")]
    pub prime_conclave: Option<String>,
}

impl Warframe {
    pub fn new(name: String, description: String, shield: String, polarities: Vec<serde_json::Value>, color: f32, conclave: String, speed: String, aura: String, power: String, info: String, thumbnail: String, mr: String, health: String, url: String, regex: String, armor: String, location: String) -> Warframe {
        Warframe {
            name,
            unique_name: None,
            patchlogs: None,
            components: None,
            description,
            _type: None,
            tradable: None,
            introduced: None,
            category: None,
            product_category: None,
            image_name: None,
            estimated_vault_date: None,
            shield,
            polarities,
            prime_power: None,
            prime_mr: None,
            color,
            prime_polarities: None,
            conclave,
            prime_armor: None,
            speed,
            aura,
            prime_url: None,
            prime_health: None,
            power,
            prime_aura: None,
            info,
            thumbnail,
            mr,
            prime_shield: None,
            health,
            prime_speed: None,
            url,
            regex,
            armor,
            location,
            prime_conclave: None,
        }
    }
}


